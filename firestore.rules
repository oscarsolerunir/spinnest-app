rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // 游댳 Albums: lectura para usuarios autenticados, escritura solo para propietarios
    match /albums/{albumId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.userIds ||
        request.auth.uid in request.resource.data.userIds ||
        // Si viewedBy es un array, se comprueba; si no, se permite (como si fuera vac칤o)
        (resource.data.viewedBy is list ? !(request.auth.uid in resource.data.viewedBy) : true)
      );
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.userIds;
    }

    // 游댳 Collections: acceso restringido solo al due침o, salvo que se trate
    // de actualizar 칰nicamente el campo "viewedBy" (para marcar como vista)
    match /collections/{collectionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Permitir que el due침o modifique la colecci칩n
        request.auth.uid == resource.data.userId ||
        // O bien, permitir actualizar 칰nicamente "viewedBy"
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewedBy']) &&
         request.resource.data.viewedBy is list &&
         request.auth.uid in request.resource.data.viewedBy)
      );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // 游댳 Conversations: Solo los participantes pueden leer/escribir
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // 游댳 Messages: Solo los participantes de la conversaci칩n pueden leer/escribir mensajes
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() &&
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
    }

    // 游댳 Users: Los usuarios pueden leer cualquier perfil, pero solo editar el suyo
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
    }

    // 游댳 Follows: Solo el seguidor puede escribir, cualquiera autenticado puede leer
    match /follows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.followerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.followerId;
    }

    // 游댳 Wishlist: Solo el usuario due침o puede leer y modificar su wishlist
    match /wishlist/{wishlistId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
