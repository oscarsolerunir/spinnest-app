rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // 游댳 Albums: lectura para usuarios autenticados, escritura solo para propietarios
    // o para modificaciones que se limiten a los campos de "viewedBy" y wishlist.
    match /albums/{albumId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      
      // Permitir actualizaciones en dos casos:
      // 1. Si el usuario ya es due침o (est치 en userIds), puede actualizar cualquier campo.
      // 2. Si el usuario NO es due침o, se permite 칰nicamente agregar su UID y su nombre,
      //    es decir, las 칰nicas claves modificadas son "userIds" y "userNames", y el nuevo array
      //    debe ser exactamente el anterior con la adici칩n de su UID (y similar para userNames).
      // 3. Adicionalmente, cualquier actualizaci칩n que afecte solo a los campos "viewedBy",
      //    "isInWishlistOfUserIds" e "isInWishlistOfUserNames" se permite.
      allow update: if isAuthenticated() && (
          // Caso 1: due침o
          request.auth.uid in resource.data.userIds ||
          // Caso 2: el usuario se a침ade a s칤 mismo a "userIds" y "userNames"
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['userIds', 'userNames']) &&
            // El nuevo array de userIds debe tener tama침o +1
            request.resource.data.userIds.size() == resource.data.userIds.size() + 1 &&
            // Todos los valores antiguos siguen presentes
            request.resource.data.userIds.hasAll(resource.data.userIds) &&
            // Y adem치s contiene el UID del usuario que hace la actualizaci칩n
            request.resource.data.userIds.hasAny([request.auth.uid]) &&
            // De forma similar para userNames
            request.resource.data.userNames.size() == resource.data.userNames.size() + 1 &&
            request.resource.data.userNames.hasAll(resource.data.userNames)
          ) ||
          // Caso 3: actualizaci칩n restringida de campos "viewedBy" y de wishlist
          request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'viewedBy',
            'isInWishlistOfUserIds',
            'isInWishlistOfUserNames'
          ])
      );

      // Solo el due침o puede eliminar el 치lbum.
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.userIds;
    }


    // 游댳 Collections: acceso restringido solo al due침o, salvo que se trate
    // de actualizar 칰nicamente el campo "viewedBy" (para marcar como vista)
    match /collections/{collectionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewedBy']) &&
          request.resource.data.viewedBy is list &&
          request.auth.uid in request.resource.data.viewedBy
        )
      );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // 游댳 Conversations: Solo los participantes pueden leer/escribir
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // 游댳 Messages: Solo los participantes de la conversaci칩n pueden leer/escribir mensajes
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() &&
        exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
    }

    // 游댳 Users: Los usuarios pueden leer cualquier perfil, pero solo editar el suyo
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
    }

    // 游댳 Follows: Solo el seguidor puede escribir, cualquiera autenticado puede leer
    match /follows/{followId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.followerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.followerId;
    }

    // 游댳 Wishlist: Solo el usuario due침o puede leer y modificar su wishlist
    match /wishlist/{wishlistId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
